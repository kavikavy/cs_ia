-- Table: public.appuser

-- DROP TABLE IF EXISTS public.appuser;

CREATE TABLE IF NOT EXISTS public.appuser
(
    user_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 100 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    user_name character varying(50) COLLATE pg_catalog."default",
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    password character varying(200) COLLATE pg_catalog."default",
    email character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT user_id_pkey PRIMARY KEY (user_id),
    CONSTRAINT uniq_user_email UNIQUE (email),
    CONSTRAINT uniq_user_name UNIQUE (user_name)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.appuser
    OWNER to postgres;



    -- Table: public.category

-- DROP TABLE IF EXISTS public.category;

CREATE TABLE IF NOT EXISTS public.category
(
    category_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 100 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    category_name character varying(50) COLLATE pg_catalog."default",
    subcategory_name character varying(50) COLLATE pg_catalog."default",
    measurement_unit character varying(50) COLLATE pg_catalog."default",
    co2_emissions double precision,
    CONSTRAINT category_id_pkey PRIMARY KEY (category_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.category
    OWNER to postgres;


    -- Table: public.challenges

-- DROP TABLE IF EXISTS public.challenges;

CREATE TABLE IF NOT EXISTS public.challenges
(
    challenge_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 100 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    challenge_name character varying(50) COLLATE pg_catalog."default",
    target_units double precision,
    consumed_units double precision,
    start_date date,
    end_date date,
    user_id integer,
    category_name character varying(30) COLLATE pg_catalog."default",
    CONSTRAINT challenge_id_pkey PRIMARY KEY (challenge_id),
    CONSTRAINT uniq_challengename UNIQUE (challenge_name, user_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.challenges
    OWNER to postgres;

    -- Table: public.consumption

-- DROP TABLE IF EXISTS public.consumption;

CREATE TABLE IF NOT EXISTS public.consumption
(
    consumption_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 100 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    category_id integer,
    consumed_units double precision,
    created_date date,
    user_id integer,
    CONSTRAINT consumption_id_pkey PRIMARY KEY (consumption_id),
    CONSTRAINT uniq_consumption UNIQUE (category_id, user_id, created_date)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.consumption
    OWNER to postgres;


    -- Table: public.friend_requests

-- DROP TABLE IF EXISTS public.friend_requests;

CREATE TABLE IF NOT EXISTS public.friend_requests
(
    request_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 100 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    sender_id integer NOT NULL,
    recipient_id integer NOT NULL,
    request_status character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    CONSTRAINT friend_requests_pkey PRIMARY KEY (request_id),
    CONSTRAINT recepient_id_fkey FOREIGN KEY (recipient_id)
        REFERENCES public.appuser (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
        NOT VALID,
    CONSTRAINT sender_id_fkey FOREIGN KEY (sender_id)
        REFERENCES public.appuser (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.friend_requests
    OWNER to postgres;

    -- Table: public.friends

-- DROP TABLE IF EXISTS public.friends;

CREATE TABLE IF NOT EXISTS public.friends
(
    friend_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 100 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    userid1 integer,
    userid2 integer,
    CONSTRAINT friend_id_pkey PRIMARY KEY (friend_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.friends
    OWNER to postgres;


    -- Table: public.password_reset_tokens

-- DROP TABLE IF EXISTS public.password_reset_tokens;

CREATE TABLE IF NOT EXISTS public.password_reset_tokens
(
    user_id integer,
    token character varying(500) COLLATE pg_catalog."default",
    expires_at timestamp without time zone
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.password_reset_tokens
    OWNER to postgres;